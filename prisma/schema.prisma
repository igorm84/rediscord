// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?  @unique
  phone     String?  @unique
  birthDate DateTime?
  password  String
  userId    String   @unique
  user      User?    @relation("AccountUser")

  @@index([userId])
}

model User {
  id                   String    @id @default(uuid())
  username             String    @unique
  avatar               String?
  lastSeen             DateTime?
  messages             Message[]
  leaderChannels       Channel[] @relation("ChannelLeader")
  serverParticipations Server[]  @relation("ServerParticipant")
  serverLeadership     Server[]  @relation("ServerLeader")
  recivedFriendRequest Request[] @relation("FriendRequestReciever")
  sendedFriendRequest  Request[] @relation("FriendRequester")
  channels             Channel[]
  accountId            String    @unique
  account              Account   @relation("AccountUser", references: [id], fields: [accountId])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id])

  @@index([userId])
  @@index([channelId])
}

model Request {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requesterId String
  requester   User     @relation("FriendRequester", fields: [requesterId], references: [id])
  addresseeId String
  addressee   User     @relation("FriendRequestReciever", fields: [addresseeId], references: [id])

  @@index([requesterId])
  @@index([addresseeId])
}

model Channel {
  id            String      @id @default(uuid())
  name          String
  type          ChannelType
  messages      Message[]
  leader        User?       @relation("ChannelLeader", fields: [userId], references: [id])
  leaderId      String?
  prarticipants User[]
  userId        String?

  @@index([userId])
}

model Server {
  id           String          @id @default(uuid())
  name         String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  channels     ServerChannel[]
  leaderId     String          @unique
  leader       User            @relation("ServerLeader", fields: [leaderId], references: [id])
  participants User[]          @relation("ServerParticipant")
}

model ServerChannel {
  id        String            @id @default(uuid())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  type      ServerChannelType
  serverId  String
  server    Server            @relation(fields: [serverId], references: [id])

  @@index([serverId])
}

enum ChannelType {
  DIRECT
  GROUP
}

enum ServerChannelType {
  TEXT
  VOICE
}
